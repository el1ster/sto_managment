from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QLabel, QLineEdit, QComboBox, QPushButton,
    QMessageBox, QDateEdit, QCheckBox, QHBoxLayout
)
from PyQt6.QtCore import QDate
from models.employee import Employee
from models.employee_position import EmployeePosition
from models.user import User
from models.role import UserRole
from logic.password_service import hash_password
from logic.validators import (
    validate_full_name, validate_phone, validate_email, validate_hire_date, validate_username, validate_password
)
from gui.dialogs.password_generator_dialog import PasswordGeneratorDialog


class EditEmployeeDialog(QDialog):
    """
    –î—ñ–∞–ª–æ–≥ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –∑–º—ñ–Ω–∏ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É.
    """

    def __init__(self, employee: Employee, current_user, parent=None):
        try:
            super().__init__(parent)
            self.employee = employee
            self.current_user = current_user

            self.setWindowTitle(f"–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞: {employee.full_name}")
            self.setFixedSize(380, 780)

            layout = QVBoxLayout()

            self.name_edit = QLineEdit(employee.full_name)
            self.phone_edit = QLineEdit(employee.phone or "")
            self.email_edit = QLineEdit(employee.email or "")
            self.hire_date_edit = QDateEdit()
            self.hire_date_edit.setCalendarPopup(True)
            if employee.hire_date:
                self.hire_date_edit.setDate(
                    QDate(employee.hire_date.year, employee.hire_date.month, employee.hire_date.day))
            else:
                self.hire_date_edit.setDate(QDate.currentDate())

            self.position_combo = QComboBox()
            try:
                self.positions = list(EmployeePosition.select())
                self.position_combo.addItems([pos.name for pos in self.positions])
                for idx, pos in enumerate(self.positions):
                    if pos.id == employee.position.id:
                        self.position_combo.setCurrentIndex(idx)
                        break
            except Exception:
                QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å–∞–¥.")
                self.positions = []

            self.active_checkbox = QCheckBox("–ê–∫—Ç–∏–≤–Ω–∏–π")
            self.active_checkbox.setChecked(employee.is_active)

            layout.addWidget(QLabel("–ü–Ü–ë:"))
            layout.addWidget(self.name_edit)
            layout.addWidget(QLabel("–¢–µ–ª–µ—Ñ–æ–Ω:"))
            phone_layout = QHBoxLayout()
            phone_layout.addWidget(self.phone_edit)

            self.check_phone_btn = QPushButton("üîç")
            self.check_phone_btn.setToolTip("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä")
            self.check_phone_btn.setFixedWidth(32)
            self.check_phone_btn.clicked.connect(self.validate_phone_field)

            phone_layout.addWidget(self.check_phone_btn)
            layout.addLayout(phone_layout)

            layout.addWidget(QLabel("Email:"))
            layout.addWidget(self.email_edit)
            layout.addWidget(QLabel("–î–∞—Ç–∞ –ø—Ä–∏–π–æ–º—É:"))
            layout.addWidget(self.hire_date_edit)
            layout.addWidget(QLabel("–ü–æ—Å–∞–¥–∞:"))
            layout.addWidget(self.position_combo)
            layout.addSpacing(10)
            layout.addWidget(self.active_checkbox)
            layout.addSpacing(12)

            self.use_existing_checkbox = QCheckBox("–ü—Ä–∏–≤‚Äô—è–∑–∞—Ç–∏ –¥–æ —ñ–Ω—à–æ—ó –æ–±–ª—ñ–∫–æ–≤–∫–∏")
            self.create_account_checkbox = QCheckBox("–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å")
            self.use_existing_checkbox.stateChanged.connect(self.sync_checkboxes)
            self.create_account_checkbox.stateChanged.connect(self.sync_checkboxes)
            layout.addWidget(self.use_existing_checkbox)
            layout.addWidget(self.create_account_checkbox)

            # --- –ü–æ—Ç–æ—á–Ω–∞ –æ–±–ª—ñ–∫–æ–≤–∫–∞ ---
            self.current_user_label = QLabel("–ü–æ—Ç–æ—á–Ω–∞ –æ–±–ª—ñ–∫–æ–≤–∫–∞:")
            self.current_user_info = QLabel()
            self.update_current_user_info()
            layout.addWidget(self.current_user_label)
            layout.addWidget(self.current_user_info)
            layout.addSpacing(10)

            self.user_label = QLabel("–û–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å:")
            self.user_combo = QComboBox()
            try:
                self.active_users = list(User.select().where(User.is_active == True))
                self.user_combo.addItems([u.username for u in self.active_users])
            except Exception:
                QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
                self.active_users = []

            self.username_label = QLabel("–õ–æ–≥—ñ–Ω:")
            self.username_edit = QLineEdit()

            self.password_label = QLabel("–ü–∞—Ä–æ–ª—å:")
            self.password_edit = QLineEdit()
            self.password_edit.setEchoMode(QLineEdit.EchoMode.Password)

            self.show_pass_btn = QPushButton("üëÅ")
            self.show_pass_btn.setCheckable(True)
            self.show_pass_btn.setFixedWidth(32)
            self.show_pass_btn.clicked.connect(self.toggle_password_visibility)

            self.gen_pass_btn = QPushButton("üõ†")
            self.gen_pass_btn.setFixedWidth(32)
            self.gen_pass_btn.clicked.connect(self.open_password_generator)

            pass_layout = QHBoxLayout()
            pass_layout.addWidget(self.password_edit)
            pass_layout.addWidget(self.show_pass_btn)
            pass_layout.addWidget(self.gen_pass_btn)

            self.role_label = QLabel("–†–æ–ª—å:")
            self.role_combo = QComboBox()
            self.load_roles()

            layout.addWidget(self.user_label)
            layout.addWidget(self.user_combo)
            layout.addWidget(self.username_label)
            layout.addWidget(self.username_edit)
            layout.addWidget(self.password_label)
            layout.addLayout(pass_layout)
            layout.addWidget(self.role_label)
            layout.addWidget(self.role_combo)

            self.user_label.hide()
            self.user_combo.hide()
            self.username_label.hide()
            self.username_edit.hide()
            self.password_label.hide()
            self.password_edit.hide()
            self.show_pass_btn.hide()
            self.gen_pass_btn.hide()
            self.role_label.hide()
            self.role_combo.hide()

            self.save_btn = QPushButton("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏")
            self.save_btn.clicked.connect(self.save_employee)
            layout.addWidget(self.save_btn)

            self.setLayout(layout)

        except Exception as e:
            QMessageBox.critical(None, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—ñ–∫–Ω–æ: {e}")

    def update_current_user_info(self):
        try:
            if self.employee.user:
                info = f"<b>{self.employee.user.username}</b> ‚Äî {self.employee.user.role.role_name}"
                if not self.employee.user.is_active:
                    info += " (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)"
                self.current_user_info.setText(info)
            else:
                self.current_user_info.setText("–û–±–ª—ñ–∫–æ–≤–∫–∞ –Ω–µ –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∞.")
        except Exception:
            self.current_user_info.setText("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –æ–±–ª—ñ–∫–æ–≤–∫–∏.")

    def toggle_password_visibility(self):
        try:
            if self.show_pass_btn.isChecked():
                self.password_edit.setEchoMode(QLineEdit.EchoMode.Normal)
                self.show_pass_btn.setText("‚ùå")
            else:
                self.password_edit.setEchoMode(QLineEdit.EchoMode.Password)
                self.show_pass_btn.setText("üëÅ")
        except Exception:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏ –≤–∏–¥–∏–º—ñ—Å—Ç—å –ø–∞—Ä–æ–ª—è.")

    def open_password_generator(self):
        try:
            dlg = PasswordGeneratorDialog(min_length=8, parent=self)
            dlg.password_generated.connect(self.password_edit.setText)
            dlg.exec()
        except Exception:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—ñ–≤.")

    def sync_checkboxes(self):
        try:
            if self.sender() == self.use_existing_checkbox and self.use_existing_checkbox.isChecked():
                self.create_account_checkbox.setChecked(False)
            elif self.sender() == self.create_account_checkbox and self.create_account_checkbox.isChecked():
                self.use_existing_checkbox.setChecked(False)
            self.update_account_fields()
        except Exception:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤.")

    def update_account_fields(self):
        try:
            use_existing = self.use_existing_checkbox.isChecked()
            create_new = self.create_account_checkbox.isChecked()

            self.user_label.setVisible(use_existing)
            self.user_combo.setVisible(use_existing)

            self.username_label.setVisible(create_new)
            self.username_edit.setVisible(create_new)
            self.password_label.setVisible(create_new)
            self.password_edit.setVisible(create_new)
            self.show_pass_btn.setVisible(create_new)
            self.gen_pass_btn.setVisible(create_new)
            self.role_label.setVisible(create_new)
            self.role_combo.setVisible(create_new)
        except Exception:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–ª—è –æ–±–ª—ñ–∫–æ–≤–∫–∏.")

    def load_roles(self):
        try:
            self.role_combo.clear()
            if self.current_user.role.role_name == "superadmin":
                roles = UserRole.select()
            else:
                roles = UserRole.select().where(UserRole.role_name.not_in(["superadmin", "admin", "owner"]))
            self.role_combo.addItems([r.role_name for r in roles])
            self.allowed_roles = list(roles)
        except Exception:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–ª—ñ.")
            self.allowed_roles = []

    def save_employee(self):
        try:
            full_name = self.name_edit.text().strip()
            phone = self.phone_edit.text().strip()
            email = self.email_edit.text().strip()
            hire_date = self.hire_date_edit.date().toPyDate()
            position = self.positions[self.position_combo.currentIndex()]
            is_active = self.active_checkbox.isChecked()

            if not validate_full_name(full_name, parent=self): return
            if not validate_phone(phone, parent=self): return
            if not validate_email(email, parent=self): return
            if not validate_hire_date(hire_date, parent=self): return

            exists_email = Employee.select().where(
                (Employee.email == email) & (Employee.id != self.employee.id)
            ).exists()
            if exists_email:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–¢–∞–∫–∏–π email –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤.")
                return

            exists_phone = Employee.select().where(
                (Employee.phone == phone) & (Employee.id != self.employee.id)
            ).exists()
            if exists_phone:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–¢–∞–∫–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤–∂–µ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤.")
                return

            user = self.employee.user
            if self.create_account_checkbox.isChecked():
                username = self.username_edit.text().strip()
                password = self.password_edit.text().strip()
                role_name = self.role_combo.currentText()

                if not validate_username(username, parent=self):
                    return
                if not validate_password(password, parent=self):
                    return
                if User.select().where(User.username == username).exists():
                    QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–¢–∞–∫–∏–π –ª–æ–≥—ñ–Ω –≤–∂–µ —ñ—Å–Ω—É—î.")
                    return

                user = User.create(
                    username=username,
                    password_hash=hash_password(password),
                    role=UserRole.get(UserRole.role_name == role_name)
                )
            elif self.use_existing_checkbox.isChecked():
                user = self.active_users[self.user_combo.currentIndex()]

            self.employee.full_name = full_name
            self.employee.phone = phone
            self.employee.email = email
            self.employee.hire_date = hire_date
            self.employee.position = position
            self.employee.is_active = is_active
            self.employee.user = user
            self.employee.save()

            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–î–∞–Ω—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
            self.accept()
        except Exception as ex:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞: {ex}")

    def validate_phone_field(self):
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î —Ç–µ–ª–µ—Ñ–æ–Ω.
        """
        phone = self.phone_edit.text().strip()
        validate_phone(phone, parent=self)
