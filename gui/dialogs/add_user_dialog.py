from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QLabel, QLineEdit, QComboBox, QPushButton,
    QMessageBox, QHBoxLayout
)
from models.user import User
from models.role import UserRole
from logic.password_service import hash_password
from logic.validators import validate_username, validate_password
from gui.dialogs.password_generator_dialog import PasswordGeneratorDialog
from peewee import IntegrityError


class AddUserDialog(QDialog):
    """
    –î—ñ–∞–ª–æ–≥ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """

    def __init__(self, current_user, parent=None):
        try:
            super().__init__(parent)
            self.setWindowTitle("–î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            self.setFixedSize(360, 320)
            self.current_user = current_user

            layout = QVBoxLayout()
            self.username_edit = QLineEdit()

            # --- –ü–æ–ª–µ –ø–∞—Ä–æ–ª—é + –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è ---
            password_layout = QHBoxLayout()
            self.password_edit = QLineEdit()
            self.password_edit.setEchoMode(QLineEdit.EchoMode.Password)

            self.show_pass_btn = QPushButton("üëÅ")
            self.show_pass_btn.setCheckable(True)
            self.show_pass_btn.setFixedWidth(32)
            self.show_pass_btn.clicked.connect(self.toggle_password_visibility)

            self.gen_password_btn = QPushButton("üîß")
            self.gen_password_btn.setToolTip("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å")
            self.gen_password_btn.setFixedWidth(32)
            self.gen_password_btn.clicked.connect(self.open_password_generator)

            password_layout.addWidget(self.password_edit)
            password_layout.addWidget(self.show_pass_btn)
            password_layout.addWidget(self.gen_password_btn)

            # --- –†–æ–ª—ñ ---
            self.role_combo = QComboBox()

            try:
                self.roles = list(UserRole.select())
                self.roles = [r for r in self.roles if r.role_name != "superadmin"]
                if self.current_user.role.role_name != "superadmin":
                    self.roles = [r for r in self.roles if r.role_name != "admin"]
                self.role_combo.addItems([r.role_name for r in self.roles])
            except Exception:
                self.roles = []
                QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

            # --- –ü–æ–±—É–¥–æ–≤–∞ –º–∞–∫–µ—Ç—É ---
            try:
                layout.addWidget(QLabel("–õ–æ–≥—ñ–Ω:"))
                layout.addWidget(self.username_edit)

                layout.addWidget(QLabel("–ü–∞—Ä–æ–ª—å:"))
                layout.addLayout(password_layout)

                layout.addWidget(QLabel("–†–æ–ª—å:"))
                layout.addWidget(self.role_combo)

                self.add_btn = QPushButton("–î–æ–¥–∞—Ç–∏")
                self.add_btn.clicked.connect(self.add_user)
                layout.addWidget(self.add_btn)

                self.setLayout(layout)
            except Exception:
                QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –º–∞–∫–µ—Ç—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.")
        except Exception as e:
            QMessageBox.critical(None, "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥: {e}")

    def toggle_password_visibility(self):
        """
        –ü–µ—Ä–µ–º–∏–∫–∞—î –≤–∏–¥–∏–º—ñ—Å—Ç—å –ø–∞—Ä–æ–ª—è.
        """
        try:
            if self.show_pass_btn.isChecked():
                self.password_edit.setEchoMode(QLineEdit.EchoMode.Normal)
                self.show_pass_btn.setText("‚ùå")
            else:
                self.password_edit.setEchoMode(QLineEdit.EchoMode.Password)
                self.show_pass_btn.setText("üëÅ")
        except Exception:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è.")

    def open_password_generator(self):
        """
        –í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–∞—Ä–æ–ª—è.
        """
        try:
            dlg = PasswordGeneratorDialog(min_length=8, parent=self)
            dlg.password_generated.connect(self.password_edit.setText)
            dlg.exec()
        except Exception:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—ñ–≤.")

    def add_user(self):
        """
        –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó.
        """
        try:
            username = self.username_edit.text().strip()
            password = self.password_edit.text()
            role_index = self.role_combo.currentIndex()

            if not validate_username(username, parent=self):
                return
            if not validate_password(password, parent=self):
                return

            try:
                user = User.create(
                    username=username,
                    password_hash=hash_password(password),
                    role=self.roles[role_index],
                    is_active=True
                )
                QMessageBox.information(self, "–£—Å–ø—ñ—Ö", f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ '{username}' –¥–æ–¥–∞–Ω–æ.")
                self.accept()
            except (IntegrityError, IndexError) as ex:
                QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {ex}")
        except Exception as ex:
            QMessageBox.critical(self, "–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–≤–µ–¥–µ–Ω–Ω—è: {ex}")
