from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton,
    QCheckBox, QSpinBox, QMessageBox
)
from PyQt6.QtCore import pyqtSignal
import random
import string
import pyperclip


class PasswordGeneratorDialog(QDialog):
    """
    –î—ñ–∞–ª–æ–≥–æ–≤–µ –≤—ñ–∫–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∞—Ä–æ–ª—è –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.
    """

    password_generated = pyqtSignal(str)

    def __init__(self, min_length: int = 8, parent=None):
        try:
            super().__init__(parent)
            self.setWindowTitle("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—ñ–≤")
            self.setFixedSize(360, 280)
            self.min_length = min_length

            layout = QVBoxLayout()

            self.generated_edit = QLineEdit()
            self.generated_edit.setReadOnly(True)

            self.length_spin = QSpinBox()
            self.length_spin.setMinimum(min_length)
            self.length_spin.setMaximum(64)
            self.length_spin.setValue(12)

            self.uppercase_cb = QCheckBox("–í–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏ (A-Z)")
            self.uppercase_cb.setChecked(True)
            self.lowercase_cb = QCheckBox("–ú–∞–ª—ñ –ª—ñ—Ç–µ—Ä–∏ (a-z)")
            self.lowercase_cb.setChecked(True)
            self.digits_cb = QCheckBox("–¶–∏—Ñ—Ä–∏ (0-9)")
            self.digits_cb.setChecked(True)
            self.symbols_cb = QCheckBox("–°–ø–µ—Ü—Å–∏–º–≤–æ–ª–∏ (!@#$...)")
            self.symbols_cb.setChecked(False)

            layout.addWidget(QLabel("–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å:"))
            layout.addWidget(self.generated_edit)

            layout.addWidget(QLabel("–î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—è:"))
            layout.addWidget(self.length_spin)

            layout.addWidget(self.uppercase_cb)
            layout.addWidget(self.lowercase_cb)
            layout.addWidget(self.digits_cb)
            layout.addWidget(self.symbols_cb)

            button_layout = QHBoxLayout()
            self.generate_btn = QPushButton("üîÅ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏")
            self.copy_btn = QPushButton("üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏")
            self.insert_btn = QPushButton("üì• –í—Å—Ç–∞–≤–∏—Ç–∏")

            self.generate_btn.clicked.connect(self.generate_password)
            self.copy_btn.clicked.connect(self.copy_password)
            self.insert_btn.clicked.connect(self.return_password)

            button_layout.addWidget(self.generate_btn)
            button_layout.addWidget(self.copy_btn)
            button_layout.addWidget(self.insert_btn)

            layout.addLayout(button_layout)
            self.setLayout(layout)
        except Exception as e:
            QMessageBox.critical(None, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª—ñ–≤: {e}")

    def generate_password(self):
        try:
            length = self.length_spin.value()

            pools = []
            required_chars = []

            if self.uppercase_cb.isChecked():
                pools.append(string.ascii_uppercase)
                required_chars.append(random.choice(string.ascii_uppercase))
            if self.lowercase_cb.isChecked():
                pools.append(string.ascii_lowercase)
                required_chars.append(random.choice(string.ascii_lowercase))
            if self.digits_cb.isChecked():
                pools.append(string.digits)
                required_chars.append(random.choice(string.digits))
            if self.symbols_cb.isChecked():
                symbols = "!@#$%^&*()_+-=[]{}|;:,.<>?/~"
                pools.append(symbols)
                required_chars.append(random.choice(symbols))

            if not pools:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª—ñ–≤.")
                return

            all_chars = ''.join(pools)
            remaining_length = length - len(required_chars)

            if remaining_length < 0:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—è –∑–∞–º–∞–ª–∞ –¥–ª—è –≤–∏–±—Ä–∞–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤.")
                return

            password_chars = required_chars + random.choices(all_chars, k=remaining_length)
            random.shuffle(password_chars)

            self.generated_edit.setText(''.join(password_chars))
        except Exception as e:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å: {e}")

    def copy_password(self):
        try:
            password = self.generated_edit.text()
            if password:
                pyperclip.copy(password)
                QMessageBox.information(self, "–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ", "–ü–∞—Ä–æ–ª—å —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É.")
        except Exception as e:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å: {e}")

    def return_password(self):
        try:
            password = self.generated_edit.text()
            if password:
                self.password_generated.emit(password)
                self.accept()
            else:
                QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª—å.")
        except Exception as e:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–¥–∞—Ç–∏ –ø–∞—Ä–æ–ª—å: {e}")
