from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem, QLabel,
    QPushButton, QHBoxLayout, QMessageBox, QInputDialog,
    QDialog, QVBoxLayout, QHBoxLayout, QLabel,
    QDialogButtonBox, QCheckBox, QScrollArea, QWidget, QHeaderView
)
from PyQt6.QtCore import Qt
from models.tax import Tax
from models.tax_group import TaxGroup
from models.tax_group_item import TaxGroupItem
from gui.dialogs.add_tax_dialog import AddTaxDialog
from gui.dialogs.edit_tax_dialog import EditTaxDialog


class TaxViewTab(QWidget):
    """
    –í–∫–ª–∞–¥–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ–≤—ñ–¥–Ω–∏–∫–∞ –ø–æ–¥–∞—Ç–∫—ñ–≤ —Ç–∞ –≥—Ä—É–ø –ø–æ–¥–∞—Ç–∫—ñ–≤.
    """

    def __init__(self, current_user, parent=None):
        super().__init__(parent)
        self.current_user = current_user

        self.layout = QVBoxLayout()

        # –¢–∞–±–ª–∏—Ü—ñ
        self.tax_table = QTableWidget()
        self.tax_group_table = QTableWidget()

        # –ù–∞–ø–∏—Å–∏
        self.tax_table_label = QLabel("–ü–æ–¥–∞—Ç–∫–∏")
        self.tax_group_table_label = QLabel("–ì—Ä—É–ø–∏ –ø–æ–¥–∞—Ç–∫—ñ–≤")

        # –ö–Ω–æ–ø–∫–∏
        self.tax_buttons = self._init_tax_buttons()
        self.group_buttons = self._init_group_buttons()

        # –í–µ—Ä—Å—Ç–∫–∞
        self.layout.addWidget(self.tax_table_label)
        self.layout.addLayout(self.tax_buttons)
        self.layout.addWidget(self.tax_table)

        self.layout.addWidget(self.tax_group_table_label)
        self.layout.addLayout(self.group_buttons)
        self.layout.addWidget(self.tax_group_table)

        self.setLayout(self.layout)

        self.init_tax_table()
        self.init_group_table()
        self.load_data()

    def _init_tax_buttons(self) -> QHBoxLayout:
        """
        –°—Ç–≤–æ—Ä—é—î –ø–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–¥–∞—Ç–∫–∞–º–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏:
        [–î–æ–¥–∞—Ç–∏] [–†–µ–¥–∞–≥—É–≤–∞—Ç–∏] [–í–∏–¥–∞–ª–∏—Ç–∏] [–û–Ω–æ–≤–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ]
        """
        layout = QHBoxLayout()

        btn_add = QPushButton("–î–æ–¥–∞—Ç–∏ –ø–æ–¥–∞—Ç–æ–∫")
        btn_add.clicked.connect(self.add_tax)
        layout.addWidget(btn_add)

        btn_edit = QPushButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ç–æ–∫")
        btn_edit.clicked.connect(self.edit_tax)
        layout.addWidget(btn_edit)

        btn_delete = QPushButton("–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥–∞—Ç–æ–∫")
        btn_delete.clicked.connect(self.delete_tax)
        layout.addWidget(btn_delete)

        btn_refresh = QPushButton("–û–Ω–æ–≤–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ")
        btn_refresh.clicked.connect(self.load_data)
        layout.addWidget(btn_refresh)  # ‚ûï –î–æ–¥–∞—î—Ç—å—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ–º

        return layout

    def _init_group_buttons(self):
        layout = QHBoxLayout()

        btn_add = QPushButton("–î–æ–¥–∞—Ç–∏ –≥—Ä—É–ø—É")
        btn_add.clicked.connect(self.add_group)
        layout.addWidget(btn_add)

        btn_delete = QPushButton("–í–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É")
        btn_delete.clicked.connect(self.delete_group)
        layout.addWidget(btn_delete)

        btn_edit = QPushButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ç–∫–∏ –≤ –≥—Ä—É–ø—ñ")
        btn_edit.clicked.connect(self.edit_group_taxes)
        layout.addWidget(btn_edit)

        return layout

    def init_tax_table(self):
        self.tax_table.setColumnCount(8)
        self.tax_table.setHorizontalHeaderLabels([
            "–ù–∞–∑–≤–∞ –ø–æ–¥–∞—Ç–∫—É", "–¢–∏–ø", "–°—Ç–∞–≤–∫–∞", "–í—ñ–¥—Å–æ—Ç–∫–æ–≤–∞", "–°—Ñ–µ—Ä–∞", "–ê–∫—Ç–∏–≤–Ω–∏–π", "–ü–ª–∞—Ç–Ω–∏–∫", "–ì—Ä—É–ø–∏"
        ])
        self.tax_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)


        header = self.tax_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.Stretch)

    def init_group_table(self):
        self.tax_group_table.setColumnCount(2)
        self.tax_group_table.setHorizontalHeaderLabels(["–ì—Ä—É–ø–∞", "–ü–æ–¥–∞—Ç–∫–∏"])
        self.tax_group_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)

    def load_data(self):
        self.load_tax_data()
        self.load_group_data()

    def load_tax_data(self):
        taxes = Tax.select().order_by(Tax.tax_name)
        self.tax_table.setRowCount(len(taxes))

        for row_idx, tax in enumerate(taxes):
            groups = ", ".join([
                g.group.group_name for g in TaxGroupItem.select().where(TaxGroupItem.tax == tax)
            ])
            self.tax_table.setItem(row_idx, 0, QTableWidgetItem(tax.tax_name))
            self.tax_table.setItem(row_idx, 1, QTableWidgetItem(tax.tax_type))
            self.tax_table.setItem(row_idx, 2, QTableWidgetItem(f"{tax.rate:.2f}"))
            self.tax_table.setItem(row_idx, 3, QTableWidgetItem("–¢–∞–∫" if tax.is_percent else "–ù—ñ"))
            self.tax_table.setItem(row_idx, 4, QTableWidgetItem(tax.applies_to))
            self.tax_table.setItem(row_idx, 5, QTableWidgetItem("–¢–∞–∫" if tax.is_active else "–ù—ñ"))
            self.tax_table.setItem(row_idx, 6, QTableWidgetItem(getattr(tax, 'payer', '‚Äî')))
            self.tax_table.setItem(row_idx, 7, QTableWidgetItem(groups))

    def load_group_data(self):
        groups = TaxGroup.select().order_by(TaxGroup.group_name)
        self.tax_group_table.setRowCount(len(groups))

        for row_idx, group in enumerate(groups):
            tax_names = ", ".join([
                item.tax.tax_name for item in TaxGroupItem.select().where(TaxGroupItem.group == group)
            ])
            self.tax_group_table.setItem(row_idx, 0, QTableWidgetItem(group.group_name))
            self.tax_group_table.setItem(row_idx, 1, QTableWidgetItem(tax_names))

    def add_tax(self):
        print("[TaxViewTab] –í—ñ–¥–∫—Ä–∏—Ç–æ –¥—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥–∞—Ç–∫—É.")
        dialog = AddTaxDialog(self)
        if dialog.exec():
            print("[TaxViewTab] ‚úÖ –ü–æ–¥–∞—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.")
            self.load_data()

    def edit_tax(self):
        row = self.tax_table.currentRow()
        if row < 0:
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥–∞—Ç–æ–∫ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            return

        tax_name = self.tax_table.item(row, 0).text()
        tax = Tax.get_or_none(Tax.tax_name == tax_name)
        print(f"[TaxViewTab] üìù –°–ø—Ä–æ–±–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥–∞—Ç–∫—É '{tax_name}'")

        if not tax:
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ü–æ–¥–∞—Ç–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        try:
            dialog = EditTaxDialog(tax, self)
            if dialog.exec():
                self.load_data()
        except Exception as e:
            print(f"[TaxViewTab] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –¥—ñ–∞–ª–æ–≥—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: {e}")

    def delete_tax(self):
        row = self.tax_table.currentRow()
        if row < 0:
            print("[TaxViewTab] ‚ö†Ô∏è –ü–æ–¥–∞—Ç–æ–∫ –Ω–µ –æ–±—Ä–∞–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –ø–æ–¥–∞—Ç–æ–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
            return

        name = self.tax_table.item(row, 0).text()
        print(f"[TaxViewTab] üóëÔ∏è –°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥–∞—Ç–æ–∫ '{name}'")
        confirm = QMessageBox.question(
            self,
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
            f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–¥–∞—Ç–æ–∫ '{name}'?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if confirm == QMessageBox.StandardButton.Yes:
            tax = Tax.get_or_none(Tax.tax_name == name)
            if tax:
                tax.delete_instance()
                print(f"[TaxViewTab] ‚úÖ –ü–æ–¥–∞—Ç–æ–∫ '{name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
                self.load_data()

    def add_group(self):
        print("[TaxViewTab] –ó–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≥—Ä—É–ø–∏ –ø–æ–¥–∞—Ç–∫—ñ–≤.")
        name, ok = QInputDialog.getText(self, "–ù–æ–≤–∞ –≥—Ä—É–ø–∞", "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏ –ø–æ–¥–∞—Ç–∫—ñ–≤:")
        if ok and name:
            TaxGroup.create(group_name=name)
            print(f"[TaxViewTab] ‚úÖ –ì—Ä—É–ø—É –ø–æ–¥–∞—Ç–∫—ñ–≤ '{name}' –¥–æ–¥–∞–Ω–æ.")
            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–ì—Ä—É–ø—É –¥–æ–¥–∞–Ω–æ")
            self.load_data()

    def delete_group(self):
        row = self.tax_group_table.currentRow()
        if row < 0:
            print("[TaxViewTab] ‚ö†Ô∏è –ì—Ä—É–ø—É –ø–æ–¥–∞—Ç–∫—ñ–≤ –Ω–µ –æ–±—Ä–∞–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
            return

        group_name = self.tax_group_table.item(row, 0).text()
        print(f"[TaxViewTab] üóëÔ∏è –°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É –ø–æ–¥–∞—Ç–∫—ñ–≤ '{group_name}'")
        group = TaxGroup.get_or_none(TaxGroup.group_name == group_name)
        if not group:
            print("[TaxViewTab] ‚ùå –ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        confirm = QMessageBox.question(
            self, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≥—Ä—É–ø—É '{group_name}'?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        if confirm == QMessageBox.StandardButton.Yes:
            TaxGroupItem.delete().where(TaxGroupItem.group == group).execute()
            group.delete_instance()
            print(f"[TaxViewTab] ‚úÖ –ì—Ä—É–ø—É '{group_name}' –≤–∏–¥–∞–ª–µ–Ω–æ.")
            self.load_data()

    def edit_group_taxes(self):
        row = self.tax_group_table.currentRow()
        if row < 0:
            print("[TaxViewTab] ‚ö†Ô∏è –ì—Ä—É–ø—É –Ω–µ –æ–±—Ä–∞–Ω–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è.")
            return

        group_name = self.tax_group_table.item(row, 0).text()
        print(f"[TaxViewTab] üõ†Ô∏è –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥–∞—Ç–∫—ñ–≤ —É –≥—Ä—É–ø—ñ '{group_name}'")
        group = TaxGroup.get_or_none(TaxGroup.group_name == group_name)
        if not group:
            print("[TaxViewTab] ‚ùå –ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        dialog = EditGroupTaxesDialog(group, self)
        if dialog.exec():
            selected_ids = dialog.get_selected_tax_ids()
            TaxGroupItem.delete().where(TaxGroupItem.group == group).execute()
            for tax_id in selected_ids:
                TaxGroupItem.create(group=group, tax=tax_id)
            print(f"[TaxViewTab] ‚úÖ –ü—Ä–∏–≤‚Äô—è–∑–∫–∏ –ø–æ–¥–∞—Ç–∫—ñ–≤ –¥–æ –≥—Ä—É–ø–∏ '{group_name}' –æ–Ω–æ–≤–ª–µ–Ω–æ.")
            QMessageBox.information(self, "–£—Å–ø—ñ—Ö", "–ü—Ä–∏–≤‚Äô—è–∑–∫–∏ –ø–æ–¥–∞—Ç–∫—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
            self.load_data()


class EditGroupTaxesDialog(QDialog):
    def __init__(self, group: TaxGroup, parent=None):
        super().__init__(parent)
        self.setWindowTitle(f"–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥–∞—Ç–∫—ñ–≤ –¥–ª—è –≥—Ä—É–ø–∏: {group.group_name}")
        self.setMinimumSize(400, 500)

        self.group = group
        self.selected_ids = set()

        layout = QVBoxLayout()

        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)

        content = QWidget()
        content_layout = QVBoxLayout()

        all_taxes = list(Tax.select().order_by(Tax.tax_name))
        current_ids = {item.tax.id for item in TaxGroupItem.select().where(TaxGroupItem.group == group)}

        self.checkboxes = []

        for tax in all_taxes:
            checkbox = QCheckBox(f"{tax.tax_name} ({tax.rate} {'%' if tax.is_percent else '–≥—Ä–Ω'})")
            checkbox.tax_id = tax.id
            checkbox.setChecked(tax.id in current_ids)
            self.checkboxes.append(checkbox)
            content_layout.addWidget(checkbox)

        content.setLayout(content_layout)
        scroll_area.setWidget(content)
        layout.addWidget(scroll_area)

        buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        layout.addWidget(buttons)

        self.setLayout(layout)

    def get_selected_tax_ids(self) -> list[int]:
        return [cb.tax_id for cb in self.checkboxes if cb.isChecked()]